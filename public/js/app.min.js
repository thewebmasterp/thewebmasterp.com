(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var o=n.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t+"../"})(),(()=>{const e=(e,t,n)=>{const o=document.createElement("i");o.classList.add(`${e}-icon`),o.setAttribute("title",n),o.setAttribute("aria-hidden",!0);const a=document.createElementNS("http://www.w3.org/2000/svg","svg");return a.classList.add("feather",`feather-${e}`),a.setAttribute("fill","none"),a.setAttribute("stroke","currentColor"),a.setAttribute("stroke-linecap","round"),a.setAttribute("stroke-linejoin","round"),a.setAttribute("stroke-width","2"),a.setAttribute("viewBox","0 0 24 24"),a.setAttribute("xmlns","http://www.w3.org/2000/svg"),a.innerHTML=t,o.append(a),o},t=function e(t){try{var n={};if(t.children.length>0)for(var o=0;o<t.children.length;o++){var a=t.children.item(o),r=a.nodeName;if(void 0===n[r])n[r]=e(a);else{if(void 0===n[r].push){var s=n[r];n[r]=[],n[r].push(s)}n[r].push(e(a))}}else n=t.textContent;return n}catch(e){console.log(e.message)}},n={defaultTheme:"dark",themeAttribute:"data-theme",iconsBasePath:"/css/icons"};class o{constructor(e,t,n,o){this.name=e,this.condition=t,this.action=n,this.id=o}static genCondit(e){return t=>e.some((e=>e===t||e===decodeURIComponent(t)||e===encodeURIComponent(t)))}}const a=[new o("any",(()=>!0),(n=>{n.log(`${n.entryName} - ${n.status}`);const o=n.config.themeAttribute;let a=localStorage.getItem(o);if(a||(localStorage.setItem(o,n.config.defaultTheme),a=n.config.defaultTheme),document?.documentElement?.setAttribute?.(o,a),window?.REMARK42?.changeTheme?.(a),setTimeout((()=>{window?.REMARK42?.changeTheme?.(a)}),1e3),n.DOMContentLoaded){document.body.classList.add("preload");const t=n.matchedRulesList.filter((e=>e.id));t[0]||n.err("No matching rules for the current page!"),document.body.setAttribute("id",t[0]?.id||"undefined");const o=document.getElementsByTagName("a"),a=["#"];[...o].forEach((e=>{const t=e.getAttribute("href");if(t.startsWith("https://")||t.startsWith("http://"))e.setAttribute("target","_blank");else if(t.substring(1).split("").some((e=>a.includes(e)))||decodeURIComponent(t.substring(1)).split("").some((e=>a.includes(e)))){console.log(t);const n=encodeURIComponent(t);e.setAttribute("href",n)}})),[...n.topnav.getElementsByTagName("a")].forEach((e=>{e.addEventListener("click",(e=>{e.target.classList.add("clicked")}))})),[...document.querySelectorAll(".theme-changer")].forEach((t=>{const o=((t,n)=>{const o=document.createElement("button");o.addEventListener("click",n);const[a,r]=[e("moon",'<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>',t),e("sun",'<circle cx="12" cy="12" r="5"></circle><line x1="12" x2="12" y1="1" y2="3"></line><line x1="12" x2="12" y1="21" y2="23"></line><line x1="4.22" x2="5.64" y1="4.22" y2="5.64"></line><line x1="18.36" x2="19.78" y1="18.36" y2="19.78"></line><line x1="1" x2="3" y1="12" y2="12"></line><line x1="21" x2="23" y1="12" y2="12"></line><line x1="4.22" x2="5.64" y1="19.78" y2="18.36"></line><line x1="18.36" x2="19.78" y1="5.64" y2="4.22"></line>',t)],s=document.createElement("span");return s.classList.add("sr-only"),s.textContent=t,o.append(a,r,s),o})("Toggle between dark and light mode",(()=>{const e=n.config.themeAttribute,o=document.documentElement.getAttribute(e);o!==localStorage.getItem(e)&&console.warn("Theme attribute - Local storage dismatch!");const a=o;"light"===a?(localStorage.setItem(e,"dark"),document.documentElement.setAttribute(e,"dark"),window?.REMARK42?.changeTheme?.("dark")):"dark"===a&&(localStorage.setItem(e,"light"),document.documentElement.setAttribute(e,"light"),window?.REMARK42?.changeTheme?.("light")),"sparse"===t.parentNode.getAttribute("class")&&t.classList.add("top-level")}));"sparse"===t.parentNode.getAttribute("class")&&t.classList.add("top-level"),t.append(o)}));const r=n.content?.getElementsByTagName("img");[...r].forEach((e=>{e.addEventListener("click",n.openImageOn)}))}else if(n.load){document.body.classList.remove("preload"),[...document.getElementsByClassName("linenr")].forEach((e=>{e.innerHTML=e.innerHTML.slice(0,-2).concat(" ")}));const e=(e=>{t(e);const n=document.createElement("div");n.id="socmedia";const o=document.createElement("div");o.className="socMediaBox",o.innerHTML=`<xml>${e.getElementsByTagName("socmedia")[0].outerHTML}</xml>`,n.append(o);const a=document.createElement("div");a.id="info";const r=document.createElement("div");r.innerHTML="Built with Emacs Org-mode • <a href='https://github.com/thewebmasterp/thewebmasterp.com'>Code</a> open sourced • Read the <a href='privacy-policy.html'>Privacy Policy</a> • <a href=\"contact.html\">Contact me</a>",a.appendChild(r);const s=document.createElement("div");s.id="bottom";const c=document.createElement("footer");return c.append(n,a,s),c})(document.getElementById("postamble").getElementsByTagName("xml")[0]);postamble.appendChild(e),[...document.getElementsByClassName("socMediaBox")].forEach((e=>{const o=e.getElementsByTagName("xml")[0];if(o){const a=t(o);e.innerHTML=((e,t)=>{const n=document.createElement("div");return n.className="socMediaBox",e=e.map((e=>{const n=document.createElement("a");n.className="profile",n.href=e.HREF;const o=document.createElement("i");o.title=e.LABEL;const a=new XMLHttpRequest;return a.open("GET",`${t}/${e.ICON}`,!1),a.send(null),200===a.status?o.innerHTML=a.responseText:console.error(`Error ${a.status} fetching icons.`),n.appendChild(o),n})),n.append(...e),n})(a.SOCMEDIA.ENTRY,n.config.iconsBasePath).outerHTML}else console.error("missing xml in .socMediaBox!")}))}else n.beforeunload})),new o("indexPage",o.genCondit(["/","/index","/index.html","index"]),(e=>{e.log(`${e.entryName} - ${e.status}`);const t=()=>{const e=document.getElementById("welcome"),n=window.innerWidth;return e.style.bottom=n<550?"5em":"4em",e.style.opacity="1",t};if("scrollRestoration"in history&&(history.scrollRestoration="manual"),e.DOMContentLoaded){e.setActiveNavEntr("homeLink");const n=document.getElementById("preamble").cloneNode(!0),o=document.getElementById("content").cloneNode(!0),a=document.getElementById("postamble").cloneNode(!0),r=document.createElement("div");r.setAttribute("id","preConPosWrapper");const s=new Array(4).fill("").map(((e,t)=>{(e=document.createElement("div")).className="fakeBg",e.id=`fakeBg-${t+1}`;const n=new Array(2).fill("").map(((e,t)=>((e=document.createElement("div")).className=`fill-${t+1}`,e)));return e.append(...n),e}));r.append(n,o,a,...s);let c=new Array(6).fill("").map((e=>({})));c.forEach(((e,t)=>{e.classList=[],e.classList.push("layer",`layer-${t}`)})),c=c.map(((e,t,n)=>{const o=document.createElement("div");o.classList.add(...e.classList);let a="";if(t===n.length-1)a=r;else{const e=document.createElement("div");e.classList.add("img"),a=e}return o.append(a),o}));const i=document.createElement("div");i.setAttribute("id","parallax"),i.append(...c),document.body.innerHTML="",document.body.appendChild(i),setTimeout((()=>{window.addEventListener("resize",t(),!0)}),150)}else e.load||e.beforeunload}),"index"),new o("aboutPage",o.genCondit(["/about.html","/about","about"]),(e=>{if(e.log(`${e.entryName} - ${e.status}`),e.DOMContentLoaded){e.setActiveNavEntr("aboutLink");const t=document.getElementById("me");t.addEventListener("load",(()=>{const n=document.getElementById("text-aboutme"),o=t.parentElement,a=o.cloneNode(!0).outerHTML;o.remove(),n.innerHTML=`${a}<div>${n.innerHTML}</div>`,document.getElementById("me").addEventListener("click",e.openImageOn)}))}else e.load||e.beforeunload}),"about"),new o("contactPage",o.genCondit(["/contact.html","/contact","contact"]),(e=>{if(e.log(`${e.entryName} - ${e.status}`),e.DOMContentLoaded){const e=document.getElementById("contactme");e||console.error("No #contactme!"),e.addEventListener("submit",(()=>{const t=document.getElementById("subject"),n=e.getAttribute("action"),o="?subject=",a=n.indexOf(o)+o.length;e.setAttribute("action",n.slice(0,a)+t.value),console.log(t.value)}));const t="Hey thewebmasterp, hear this joke. ",n=["What are a shark's two most favorite words?","Why are ghosts such bad liars?","What do you call a singing laptop?","What did the buffalo say when his son left for college?","Why did the web developer drown?","Why was the JavaScript reality show cancelled after only one episode?","How can you tell that a web developer is working?","Why does no one like jokes about descriptions, keywords, or character encodings?","Why did the IP cross the subnet?","Why was the class upset that its parent died?","How do you comfort a JavaScript bug?","Why was the web developer fired from her job?","How does a web developer like his coffee?","Why did the web developer send a few extra bucks to her hosting provider?","Why couldn’t the programmer work late into the night?"].map((e=>`${t}${e}`)),o="alreadySeenJokes";let a=JSON.parse(localStorage.getItem(o))||[];a.length===n.length&&(localStorage.setItem(o,JSON.stringify([])),a=JSON.parse(localStorage.getItem(o))),a.forEach((e=>{n.splice(e,1)}));const r=Math.floor(Math.random()*n.length),s=JSON.parse(localStorage.getItem(o))||[];s.push(r),localStorage.setItem(o,JSON.stringify(s)),document.getElementById("message").setAttribute("placeholder",n[r])}else e.load||e.beforeunload}),"contact"),new o("blog",(e=>e.includes("blog")),(e=>{e.log(`${e.entryName} - ${e.status}`),e.DOMContentLoaded?e.setActiveNavEntr("blogLink"):e.load||e.beforeunload})),new o("blogPage",o.genCondit(["/blog.html","/blog","blog"]),(e=>{if(e.log(`${e.entryName} - ${e.status}`),e.DOMContentLoaded){const e={"Desktop Setup/":{title:"Optimizing your Linux desktop setup for programming",description:"Let the articles under this section be a compendium - An essence of my hard-learned lessons regarding Linux and its configuration as a maximum productivity, programming desktop OS."},"webmaster_project/":{title:"Master JavaScript",description:"Every JavaScript thing that got my interest and inspired me, I'll write a post about it and it will be listed here."}};document.querySelectorAll("#entries > ul > li").forEach((t=>{const n=t.getElementsByTagName("b")[0],o=n.textContent;Object.keys(e).forEach((t=>{if(o===t){const o=document.createElement("div"),a=document.createElement("h3");a.textContent=e[t].title;const r=document.createElement("p");r.textContent=e[t].description;const s=document.createElement("ul");s.appendChild(r),o.append(a,s),n.parentNode.replaceChild(o,n)}}))}))}else e.load||e.beforeunload}),"blog"),new o("article",(e=>e.includes("blog")&&!o.genCondit(["/blog.html","/blog","blog"])(e)),(e=>{if(e.log(`${e.entryName} - ${e.status}`),e.DOMContentLoaded){const e=` <div id="ArticleMetaData">\nLast change: ${document.head.innerHTML.split("\n")[1].replace(/<!-- | -->/g,"")}<br>\nAuthor: <a href="/about.html">${document.querySelector('meta[name="author"]').content}</a>\n</div>`,t=`<p id="description">${document.querySelector('meta[name="description"]').content}</p>`,n=document.getElementById("content").getElementsByTagName("header")[0];n.innerHTML=n.innerHTML+e+t}else e.load||e.beforeunload}),"article")],r=e=>{((e,t)=>{const n=e.type,o=window.location.pathname,r=a.filter((e=>e.condition(o))),s={config:t,status:n,DOMContentLoaded:"DOMContentLoaded"===n,load:"load"===n,beforeunload:"beforeunload"===n,html:document.documentElement,head:document.head,body:document.body,preamble:document.getElementById("preamble"),topnav:document.getElementById("topnav"),content:document.getElementById("content"),postamble:document.getElementById("postamble"),footer:document.getElementsByTagName("footer")[0],log:console.log,err:console.error,matchedRulesList:r,setActiveNavEntr:e=>{document.getElementsByClassName(e)[0].setAttribute("data-current","")},openImageOn:e=>{const t=e.target.getAttribute("src");window.open(t,"_blank").focus()}};r.forEach((e=>{"any"!==e.name&&(s.entryName=e.name||null,e.action(s))})),r.forEach((e=>{"any"===e.name&&(s.entryName="any",e.action(s))}))})(e,n)};window.addEventListener("DOMContentLoaded",r),window.addEventListener("load",r),window.addEventListener("beforeunload",r)})(),e.p})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,