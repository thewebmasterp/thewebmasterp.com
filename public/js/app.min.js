/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./content/js/actions/aboutPage.js":
/*!*****************************************!*\
  !*** ./content/js/actions/aboutPage.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const aboutPage = sp => {
  sp.log(`${sp.entryName} - ${sp.status}`)
  if (sp.DOMContentLoaded) {
    // Set the active navigation entry
    sp.setActiveNavEntr('aboutLink')

    // Give some custom structure to aboutme
    const me = document.getElementById('me')
    me.addEventListener('load', () => {
      const textAboutme = document.getElementById('text-aboutme')
      const figure = me.parentElement
      const figureHTML = figure.cloneNode(true).outerHTML
      figure.remove()
      textAboutme.innerHTML = `${figureHTML}<div>${textAboutme.innerHTML}</div>`
      document.getElementById('me').addEventListener('click', sp.openImageOn)
    })
  } else if (sp.load) {
  } else if (sp.beforeunload) {
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (aboutPage);


/***/ }),

/***/ "./content/js/actions/any.js":
/*!***********************************!*\
  !*** ./content/js/actions/any.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_themeChanger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/themeChanger */ "./content/js/components/themeChanger.js");
/* harmony import */ var _components_footerGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/footerGenerator */ "./content/js/components/footerGenerator.js");
/* harmony import */ var _components_socialMediaBoxGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/socialMediaBoxGenerator */ "./content/js/components/socialMediaBoxGenerator.js");
/* harmony import */ var _scripts_xml2json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scripts/xml2json */ "./content/js/scripts/xml2json.js");






const any = sp => {
  sp.log(`${sp.entryName} - ${sp.status}`)

  // Initialize theme
  const attr = sp.config.themeAttribute
  let theme = localStorage.getItem(attr)
  if (!theme) {
    localStorage.setItem(attr, sp.config.defaultTheme)
    theme = sp.config.defaultTheme
  }
  document?.documentElement?.setAttribute?.(attr, theme)
  window?.REMARK42?.changeTheme?.(theme)
  setTimeout(() => {
    // Just to make sure
    window?.REMARK42?.changeTheme?.(theme)
  }, 1000)

  if (sp.DOMContentLoaded) {
    // Add a class of .preload to the body (and when the whole page is loaded - Remove it).
    document.body.classList.add('preload')

    // Apply the appropriate id to the current page's body
    const withIdOnly = sp.matchedRulesList.filter(entry => entry.id)
    if (!withIdOnly[0]) {
      sp.err('No matching rules for the current page!')
    }
    document.body.setAttribute('id', withIdOnly[0]?.id || 'undefined')

    // Every link pointing to an outside website should be opened in a new tab
    // Every link href should be formatted (I understand JS more than elisp... sry)
    const contentAnchors = document.getElementsByTagName('a')
    // NOTE: If you use any special characters like # or sth else in your filenames, list them here.
    const specChar = ['#']
    ;[...contentAnchors].forEach(a => {
      const href = a.getAttribute('href')
      if (href.startsWith('https://') || href.startsWith('http://')) {
        a.setAttribute('target', '_blank')
      } else if (
        href
          .substring(1)
          .split('')
          .some(str => specChar.includes(str)) ||
        decodeURIComponent(href.substring(1))
          .split('')
          .some(str => specChar.includes(str))
      ) {
        console.log(href)
        const newHref = encodeURIComponent(href)
        a.setAttribute('href', newHref)
      }
    })

    // Append a CSS class .clicked to a clicked anchor from #topnav
    const topNavLinks = sp.topnav.getElementsByTagName('a')
    ;[...topNavLinks].forEach(a => {
      a.addEventListener('click', e => {
        e.target.classList.add('clicked')
      })
    })

    // Theme changer controls
    const themSwrConstructionSites = [
      ...document.querySelectorAll('.theme-changer'),
    ]
    themSwrConstructionSites.forEach(site => {
      const btn = (0,_components_themeChanger__WEBPACK_IMPORTED_MODULE_0__["default"])('Toggle between dark and light mode', () => {
        //btn onclick callback
        const attr = sp.config.themeAttribute
        const currThemeFromAttr = document.documentElement.getAttribute(attr)
        const currThemeFromLStorage = localStorage.getItem(attr)
        if (currThemeFromAttr !== currThemeFromLStorage)
          console.warn('Theme attribute - Local storage dismatch!')
        const currentTheme = currThemeFromAttr
        if (currentTheme === 'light') {
          // Switch to dark
          localStorage.setItem(attr, 'dark')
          document.documentElement.setAttribute(attr, 'dark')
          window?.REMARK42?.changeTheme?.('dark')
        } else if (currentTheme === 'dark') {
          // Switch to light
          localStorage.setItem(attr, 'light')
          document.documentElement.setAttribute(attr, 'light')
          window?.REMARK42?.changeTheme?.('light')
        }
        if (site.parentNode.getAttribute('class') === 'sparse') {
          site.classList.add('top-level')
        }
      })
      if (site.parentNode.getAttribute('class') === 'sparse') {
        site.classList.add('top-level')
      }
      site.append(btn)
    })

    /*
    ;[...document.querySelectorAll('.theme-changer > button')].forEach(btn => {
      btn.addEventListener('click', () => {
        //Implement the local storage and DOM toggle
        sp.log('.theme-changer button clicked')
        const currentTheme = document.documentElement.getAttribute(attr)
        if (currentTheme === 'light') {
          // Switch to dark
          localStorage.setItem(attr, 'dark')
          document.documentElement.setAttribute(attr, 'dark')
          window?.REMARK42?.changeTheme?.('dark')
        } else if (currentTheme === 'dark') {
          // Switch to light
          localStorage.setItem(attr, 'light')
          document.documentElement.setAttribute(attr, 'light')
          window?.REMARK42?.changeTheme?.('light')
        } 

        // Add some cool styling to the button itself to indicate theme
      })
    })*/

    // Every image in #content, on click should be opened in a new tab.
    const imgs = sp.content?.getElementsByTagName('img')
    ;[...imgs].forEach(img => {
      img.addEventListener('click', sp.openImageOn)
    })
  } else if (sp.load) {
    // Remove the class of .preload of the body when the whole page's loaded.
    document.body.classList.remove('preload')

    // Remove the colon at the end of code line number
    ;[...document.getElementsByClassName('linenr')].forEach(line => {
      line.innerHTML = line.innerHTML.slice(0, -2).concat(' ')
    })

    //Make the footer
    const footer = (0,_components_footerGenerator__WEBPACK_IMPORTED_MODULE_1__["default"])(
      document.getElementById('postamble').getElementsByTagName('xml')[0]
    )
    //postamble.innerHTML += footer.outerHTML
    postamble.appendChild(footer)

    // Process .socMediaBox
    const socMediaBoxes = document.getElementsByClassName('socMediaBox')
    ;[...socMediaBoxes].forEach(socMediaBox => {
      const xml = socMediaBox.getElementsByTagName('xml')[0]
      if (xml) {
        const json = (0,_scripts_xml2json__WEBPACK_IMPORTED_MODULE_3__["default"])(xml)
        socMediaBox.innerHTML = (0,_components_socialMediaBoxGenerator__WEBPACK_IMPORTED_MODULE_2__["default"])(
          json['SOCMEDIA']['ENTRY'],
          sp.config.iconsBasePath
        ).outerHTML
      } else {
        console.error('missing xml in .socMediaBox!')
      }
    })
  } else if (sp.beforeunload) {
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (any);


/***/ }),

/***/ "./content/js/actions/blog.js":
/*!************************************!*\
  !*** ./content/js/actions/blog.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const blog = sp => {
  sp.log(`${sp.entryName} - ${sp.status}`)
  if (sp.DOMContentLoaded) {
    // Set the active navigation entry
    sp.setActiveNavEntr('blogLink')
  } else if (sp.load) {
  } else if (sp.beforeunload) {
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (blog);


/***/ }),

/***/ "./content/js/actions/blogArticle.js":
/*!*******************************************!*\
  !*** ./content/js/actions/blogArticle.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const blogArticle = sp => {
  sp.log(`${sp.entryName} - ${sp.status}`)
  if (sp.DOMContentLoaded) {
    // Get date passed through an html comment inside <head>
    const date = document.head.innerHTML
      .split('\n')[1]
      .replace(/<!-- | -->/g, '')

    // Get author and description from some <meta>s in <head>
    const author = document.querySelector('meta[name="author"]').content
    const description = document.querySelector('meta[name="description"]')
      .content

    // Structure the fetched metadata to be inserted on the right place
    const meta = ` <div id="ArticleMetaData">
Last change: ${date}<br>
Author: <a href="/about.html">${author}</a>
</div>`
    const descriptionHTML = `<p id="description">${description}</p>`

    // Insert the metadata
    const header = document
      .getElementById('content')
      .getElementsByTagName('header')[0]
    header.innerHTML = header.innerHTML + meta + descriptionHTML
  } else if (sp.load) {
  } else if (sp.beforeunload) {
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (blogArticle);


/***/ }),

/***/ "./content/js/actions/blogPage.js":
/*!****************************************!*\
  !*** ./content/js/actions/blogPage.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const blogPage = sp => {
  sp.log(`${sp.entryName} - ${sp.status}`)
  if (sp.DOMContentLoaded) {
    // Replace default section headings (arch/ js/ for example) with custom ones
    const mapTo = {
      'Desktop Setup/': {
        title: 'Optimizing your Linux desktop setup for programming',
        description:
          'Let the articles under this section be a compendium - An essence of my hard-learned lessons regarding Linux and its configuration as a maximum productivity, programming desktop OS.',
      },
      'webmaster_project/': {
        title: 'Master JavaScript',
        description:
          "Every JavaScript thing that got my interest and inspired me, I'll write a post about it and it will be listed here.",
      },
    }
    // Do it
    const entries = document.querySelectorAll('#entries > ul > li')
    entries.forEach(li => {
      const target = li.getElementsByTagName('b')[0]
      const inTarget = target.textContent
      Object.keys(mapTo).forEach(key => {
        if (inTarget === key) {
          const toReplaceTarget = document.createElement('div')
          const title = document.createElement('h3')
          title.textContent = mapTo[key].title
          const description = document.createElement('p')
          description.textContent = mapTo[key].description
          const descriptionWrapper = document.createElement('ul')
          descriptionWrapper.appendChild(description)
          toReplaceTarget.append(title, descriptionWrapper)
          target.parentNode.replaceChild(toReplaceTarget, target)
        }
      })
    })
  } else if (sp.load) {
  } else if (sp.beforeunload) {
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (blogPage);


/***/ }),

/***/ "./content/js/actions/contactPage.js":
/*!*******************************************!*\
  !*** ./content/js/actions/contactPage.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const contactPage = sp => {
  sp.log(`${sp.entryName} - ${sp.status}`)
  if (sp.DOMContentLoaded) {
    const contactme = document.getElementById('contactme')
    if (!contactme) console.error('No #contactme!')
    contactme.addEventListener('submit', () => {
      const subject = document.getElementById('subject')
      const action = contactme.getAttribute('action')
      const subjectPrefix = '?subject='
      const i = action.indexOf(subjectPrefix) + subjectPrefix.length
      contactme.setAttribute('action', action.slice(0, i) + subject.value)
      console.log(subject.value)
    })

    const greeting = 'Hey thewebmasterp, hear this joke. '
    const jokes = [
      "What are a shark's two most favorite words?", // Man overboard!
      'Why are ghosts such bad liars?', // Because they are easy to see through.
      'What do you call a singing laptop?', // A Dell!
      'What did the buffalo say when his son left for college?', // Bison!
      'Why did the web developer drown?', // He had too many anchors.
      'Why was the JavaScript reality show cancelled after only one episode?', // People thought it seemed scripted.
      'How can you tell that a web developer is working?', // You can hear him Grunting!
      'Why does no one like jokes about descriptions, keywords, or character encodings?', // They’re too ‘meta’.
      'Why did the IP cross the subnet?', // Because the NAT said to!
      'Why was the class upset that its parent died?', // Because it wouldn’t be getting the inheritance!
      'How do you comfort a JavaScript bug?', // You console it.
      'Why was the web developer fired from her job?', // She did Less every day.
      'How does a web developer like his coffee?', // #000000
      'Why did the web developer send a few extra bucks to her hosting provider?', // Because she heard that she should always tip her server.
      'Why couldn’t the programmer work late into the night?', // She didn’t have a LAMP.
    ].map(joke => `${greeting}${joke}`)

    const prop = 'alreadySeenJokes'
    let alreadySeen = JSON.parse(localStorage.getItem(prop)) || []
    if (alreadySeen.length === jokes.length) {
      // If all jokes seen, reset the tracker
      localStorage.setItem(prop, JSON.stringify([]))
      alreadySeen = JSON.parse(localStorage.getItem(prop))
    }
    // Remove the already seen jokes
    alreadySeen.forEach(n => {
      jokes.splice(n, 1)
    })
    const randomJokeIndex = Math.floor(Math.random() * jokes.length)
    const newAlreadySeen = JSON.parse(localStorage.getItem(prop)) || []
    newAlreadySeen.push(randomJokeIndex)
    localStorage.setItem(prop, JSON.stringify(newAlreadySeen))

    // Apply the chosen joke as a placeholder for the message
    document
      .getElementById('message')
      .setAttribute('placeholder', jokes[randomJokeIndex])
  } else if (sp.load) {
  } else if (sp.beforeunload) {
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (contactPage);


/***/ }),

/***/ "./content/js/actions/indexPage.js":
/*!*****************************************!*\
  !*** ./content/js/actions/indexPage.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const indexPage = sp => {
  sp.log(`${sp.entryName} - ${sp.status}`)

  // Welcome the user with a nice falling-from-the-sky message
  const welcomeUs = () => {
    const welcome = document.getElementById('welcome')
    const pgw = window.innerWidth
    welcome.style.bottom = pgw < 550 ? '5em' : '4em'
    welcome.style.opacity = '1'
    return welcomeUs //Returns itself (needed for addEventListener in this case)
  }

  // When the index page is reloaded, its scroll should always start from top. Else, there's a bug with the #mask.
  if ('scrollRestoration' in history) {
    history.scrollRestoration = 'manual'
  }

  if (sp.DOMContentLoaded) {
    // Set the active navigation entry
    sp.setActiveNavEntr('homeLink')

    // Parralax

    // Unite #preamble, #content and #postamble "under the flag" of #preConPosWrapper
    const preamble = document.getElementById('preamble').cloneNode(true)
    const content = document.getElementById('content').cloneNode(true)
    const postamble = document.getElementById('postamble').cloneNode(true)
    const preConPosWrapper = document.createElement('div')
    preConPosWrapper.setAttribute('id', 'preConPosWrapper')
    // Some insignificant boxes with gradient / fill.
    const boxes = new Array(4).fill('').map((box, i) => {
      box = document.createElement('div')
      box.className = 'fakeBg'
      box.id = `fakeBg-${i + 1}`
      const fills = new Array(2).fill('').map((fill, i) => {
        fill = document.createElement('div')
        fill.className = `fill-${i + 1}`
        return fill
      })
      box.append(...fills)
      return box
    })
    preConPosWrapper.append(preamble, content, postamble, ...boxes)

    let parallaxLayers = new Array(6).fill('').map(str => ({}))
    parallaxLayers.forEach((proto, i) => {
      proto.classList = []
      proto.classList.push('layer', `layer-${i}`)
    })
    parallaxLayers = parallaxLayers.map((proto, i, arr) => {
      const el = document.createElement('div')
      el.classList.add(...proto.classList)

      let content = ''
      if (i === arr.length - 1) {
        // If it is the last element add main content to it
        content = preConPosWrapper
      } else {
        // Else, it is a frame of the parallax
        // Create a sub-element which holds parallax frame background
        const img = document.createElement('div')
        img.classList.add('img')
        content = img
        /*
		 * Deprecated!
		 * Changing element class every few milliseconds triggers a DOM re-render
		 * which is causing this choppiness.
		 * 
        if (proto.toggleClasses?.length >= 2) {
          // Pick a random string from the arr and apply it to the .img in random intervals
          const randClassOnRandInterval = (
            el,
            arr,
            min = 200,
            max = 600,
            prev
          ) => {
            let randClass
            //Make sure the randClass is not the same as the old one.
            do {
              randClass = arr[Math.floor(Math.random() * arr.length)]
            } while (randClass === prev)

            const randInterval = Math.floor(
              Math.random() * (max - min + 1) + min
            )
            if (prev) {
              // Clean up
              el.classList.remove(prev)
            }
            el.classList.add(randClass)
            setTimeout(
              randClassOnRandInterval,
              randInterval,
              img,
              arr,
              min,
              max,
              randClass
            )
          }
          // All that needs multiple frames, set up individual settings here
          if (proto.toggleClasses.includes('hands1')) {
            // Toggle the hands
            randClassOnRandInterval(img, proto.toggleClasses, 150, 200)
          } else if (proto.toggleClasses.includes('eyes1')) {
            // Toggle the eyes
            randClassOnRandInterval(img, proto.toggleClasses, 50, 1000)
          }
        } */
      }
      el.append(content)

      return el
    })

    // Create the #parallax
    const parallax = document.createElement('div')
    parallax.setAttribute('id', 'parallax')
    parallax.append(...parallaxLayers)

    // Devastate and recreate the <body>
    document.body.innerHTML = ''
    document.body.appendChild(parallax)

    // 2. Greeting
    setTimeout(() => {
      window.addEventListener('resize', welcomeUs(), true) //Not a typo: Call welcomeUs initially and then on resize. (Notice that welcomeUs returns itself)
    }, 150)
  } else if (sp.load) {
  } else if (sp.beforeunload) {
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (indexPage);


/***/ }),

/***/ "./content/js/components/footerGenerator.js":
/*!**************************************************!*\
  !*** ./content/js/components/footerGenerator.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _scripts_xml2json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scripts/xml2json */ "./content/js/scripts/xml2json.js");


const footerGenerator = xml => {
  const json = (0,_scripts_xml2json__WEBPACK_IMPORTED_MODULE_0__["default"])(xml)

  // SocialMedia
  const socmedia = document.createElement('div')
  socmedia.id = 'socmedia'
  const socialMediaBox = document.createElement('div')
  socialMediaBox.className = 'socMediaBox'
  socialMediaBox.innerHTML = `<xml>${
    xml.getElementsByTagName('socmedia')[0].outerHTML
  }</xml>` // The xml will later be replaced. Look at action any.js
  socmedia.append(socialMediaBox)

  // Subscribe (NOTE: For now this component is not needed, therefore it won't be displayed)
  /*
  const subscribe = document.createElement('div')
  subscribe.id = 'subscribe'
  const cta = document.createElement('h5')
  cta.id = 'cta'
  cta.innerHTML = json['SUBSCRIBE']['CTA']
  const subTwitter = document.createElement('div')
  subTwitter.id = 'subTwitter'
  const subEmail = document.createElement('div')
  subEmail.id = 'subEmail'
  const subRss = document.createElement('div')
  subRss.id = 'subRss'
  subscribe.append(cta, subTwitter, subEmail, subRss)
*/

  // Info
  const info = document.createElement('div')
  info.id = 'info'
  const div = document.createElement('div')
  div.innerHTML = `Built with Emacs Org-mode • <a href='https://github.com/thewebmasterp/thewebmasterp.com'>Code</a> open sourced • Read the <a href='privacy-policy.html'>Privacy Policy</a> • <a href="contact.html">Contact me</a>`
  info.appendChild(div)

  // Bottom
  const bottom = document.createElement('div')
  bottom.id = 'bottom'

  // Assemble and 'spit' the footer
  const footer = document.createElement('footer')
  footer.append(socmedia, /*subscribe*/ info, bottom)
  return footer
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (footerGenerator);


/***/ }),

/***/ "./content/js/components/socialMediaBoxGenerator.js":
/*!**********************************************************!*\
  !*** ./content/js/components/socialMediaBoxGenerator.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const socialMediaBoxGenerator = (arr, iconsBasePath) => {
  // input format: [{label: github, href: 'https://www.github.com', icon: './icons/icon.png' }, {...}]

  const box = document.createElement('div')
  box.className = 'socMediaBox'

  arr = arr.map(entry => {
    const profile = document.createElement('a')
    profile.className = 'profile'
    profile.href = entry['HREF']

    const icon = document.createElement('i')
    icon.title = entry['LABEL']

    const request = new XMLHttpRequest()
    request.open('GET', `${iconsBasePath}/${entry['ICON']}`, false) // `false` makes the request synchronous
    request.send(null)
    if (request.status === 200) {
      icon.innerHTML = request.responseText
    } else {
      console.error(`Error ${request.status} fetching icons.`)
    }

    profile.appendChild(icon)
    return profile
  })

  box.append(...arr)
  return box
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socialMediaBoxGenerator);


/***/ }),

/***/ "./content/js/components/themeChanger.js":
/*!***********************************************!*\
  !*** ./content/js/components/themeChanger.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const iconGenerator = (label, innerHTML, tooltip) => {
  const icon = document.createElement('i')
  icon.classList.add(`${label}-icon`)
  icon.setAttribute('title', tooltip)
  icon.setAttribute('aria-hidden', true)
  // You can't properly generate svg element with document.createElement. You have to use createElementNS, as follows:
  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')
  // For more on the topic, see https://stackoverflow.com/questions/28734628/how-can-i-set-an-attribute-with-case-sensitive-name-in-a-javascript-generated-el/28734954
  svg.classList.add('feather', `feather-${label}`)
  svg.setAttribute('fill', 'none')
  svg.setAttribute('stroke', 'currentColor')
  svg.setAttribute('stroke-linecap', 'round')
  svg.setAttribute('stroke-linejoin', 'round')
  svg.setAttribute('stroke-width', '2')
  svg.setAttribute('viewBox', '0 0 24 24')
  svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg')
  svg.innerHTML = innerHTML
  icon.append(svg)

  return icon
}

const themeChangerBtn = (tooltip, onClick) => {
  //const constructionSites = [...document.querySelectorAll(selector)]

  const button = document.createElement('button')

  button.addEventListener('click', onClick)

  const moonInHTML =
    '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>'
  const sunInHTML =
    '<circle cx="12" cy="12" r="5"></circle><line x1="12" x2="12" y1="1" y2="3"></line><line x1="12" x2="12" y1="21" y2="23"></line><line x1="4.22" x2="5.64" y1="4.22" y2="5.64"></line><line x1="18.36" x2="19.78" y1="18.36" y2="19.78"></line><line x1="1" x2="3" y1="12" y2="12"></line><line x1="21" x2="23" y1="12" y2="12"></line><line x1="4.22" x2="5.64" y1="19.78" y2="18.36"></line><line x1="18.36" x2="19.78" y1="5.64" y2="4.22"></line>'
  const [moonIcon, sunIcon] = [
    iconGenerator('moon', moonInHTML, tooltip),
    iconGenerator('sun', sunInHTML, tooltip),
  ]

  const btnTextEl = document.createElement('span')
  btnTextEl.classList.add('sr-only')
  btnTextEl.textContent = tooltip

  button.append(moonIcon, sunIcon, btnTextEl)

  return button
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (themeChangerBtn);


/***/ }),

/***/ "./content/js/matomoInit.js":
/*!**********************************!*\
  !*** ./content/js/matomoInit.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const matomoInit = () => {
  // TODO: Enable and debug this script after pushed to production
  /*
  var _paq = (window._paq = window._paq || [])
  // tracker methods like "setCustomDimension" should be called before "trackPageView"
  _paq.push(['trackPageView'])
  _paq.push(['enableLinkTracking'])
  ;(function() {
	var u = '//matomo.thewebmasterp.com/'
	_paq.push(['setTrackerUrl', u + 'matomo.php'])
	_paq.push(['setSiteId', '1'])
	var d = document,
		g = d.createElement('script'),
		s = d.getElementsByTagName('script')[0]
	g.async = true
	g.src = u + 'matomo.js'
	s.parentNode.insertBefore(g, s)
  })()*/
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (matomoInit);


/***/ }),

/***/ "./content/js/scripts/xml2json.js":
/*!****************************************!*\
  !*** ./content/js/scripts/xml2json.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function xml2json(xml) {
  try {
    var obj = {}
    if (xml.children.length > 0) {
      for (var i = 0; i < xml.children.length; i++) {
        var item = xml.children.item(i)
        var nodeName = item.nodeName

        if (typeof obj[nodeName] == 'undefined') {
          obj[nodeName] = xml2json(item)
        } else {
          if (typeof obj[nodeName].push == 'undefined') {
            var old = obj[nodeName]

            obj[nodeName] = []
            obj[nodeName].push(old)
          }
          obj[nodeName].push(xml2json(item))
        }
      }
    } else {
      obj = xml.textContent
    }
    return obj
  } catch (e) {
    console.log(e.message)
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (xml2json);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl + "../";
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
var __webpack_exports__ = {};
/*!*****************************!*\
  !*** ./content/js/index.js ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _matomoInit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./matomoInit */ "./content/js/matomoInit.js");
/* harmony import */ var _actions_any__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions/any */ "./content/js/actions/any.js");
/* harmony import */ var _actions_indexPage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actions/indexPage */ "./content/js/actions/indexPage.js");
/* harmony import */ var _actions_aboutPage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actions/aboutPage */ "./content/js/actions/aboutPage.js");
/* harmony import */ var _actions_contactPage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions/contactPage */ "./content/js/actions/contactPage.js");
/* harmony import */ var _actions_blog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions/blog */ "./content/js/actions/blog.js");
/* harmony import */ var _actions_blogPage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions/blogPage */ "./content/js/actions/blogPage.js");
/* harmony import */ var _actions_blogArticle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./actions/blogArticle */ "./content/js/actions/blogArticle.js");










const CONFIG = {
  defaultTheme: 'dark',
  themeAttribute: 'data-theme',
  iconsBasePath: '/css/icons',
}

class Rule {
  constructor(name, condition, action, id) {
    this.name = name
    this.condition = condition
    this.action = action
    this.id = id
  }
  static genCondit(arr) {
    return path => {
      // NOTE: Sometimes, if the link has a doubleshlash, it fails these tests and the
      // site breaks! I didn't resolve this in the front-end because even if i did so,
      // it wouldn't solve the problem in its root: Why this whole thing depends on the url?
      return arr.some(str => {
        /*
        console.log(`Comparing: '${str}' with '${path}'`)
        console.log(
          `=> ${str === path} ||
            ${str === decodeURIComponent(path)} ||
            ${str === encodeURIComponent(path)}`
        )*/
        return (
          str === path ||
          str === decodeURIComponent(path) ||
          str === encodeURIComponent(path)
        )
      })
    }
  }
}

const rules = [
  new Rule('any', () => true, _actions_any__WEBPACK_IMPORTED_MODULE_1__["default"]),
  new Rule(
    'indexPage',
    Rule.genCondit(['/', '/index', '/index.html', 'index']),
    _actions_indexPage__WEBPACK_IMPORTED_MODULE_2__["default"],
    'index'
  ),
  new Rule(
    'aboutPage',
    Rule.genCondit(['/about.html', '/about', 'about']),
    _actions_aboutPage__WEBPACK_IMPORTED_MODULE_3__["default"],
    'about'
  ),
  new Rule(
    'contactPage',
    Rule.genCondit(['/contact.html', '/contact', 'contact']),
    _actions_contactPage__WEBPACK_IMPORTED_MODULE_4__["default"],
    'contact'
  ),
  new Rule('blog', path => path.includes('blog'), _actions_blog__WEBPACK_IMPORTED_MODULE_5__["default"]),
  new Rule(
    'blogPage',
    Rule.genCondit(['/blog.html', '/blog', 'blog']),
    _actions_blogPage__WEBPACK_IMPORTED_MODULE_6__["default"],
    'blog'
  ),
  new Rule(
    'article',
    path => {
      return (
        path.includes('blog') &&
        !Rule.genCondit(['/blog.html', '/blog', 'blog'])(path)
      )
    },
    _actions_blogArticle__WEBPACK_IMPORTED_MODULE_7__["default"],
    'article'
  ),
]

const main = (event, config) => {
  const status = event.type
  const pathname = window.location.pathname
  const matching = rules.filter(entry => {
    // console.log(entry.condition)
    return entry.condition(pathname)
  })
  const starterPack = {
    config: config,
    status: status,
    DOMContentLoaded: status === 'DOMContentLoaded',
    load: status === 'load',
    beforeunload: status === 'beforeunload',
    html: document.documentElement,
    head: document.head,
    body: document.body,
    preamble: document.getElementById('preamble'),
    topnav: document.getElementById('topnav'),
    content: document.getElementById('content'),
    postamble: document.getElementById('postamble'),
    footer: document.getElementsByTagName('footer')[0],
    log: console.log,
    err: console.error,
    matchedRulesList: matching,
    setActiveNavEntr: className => {
      const target = document.getElementsByClassName(className)[0]
      target.setAttribute('data-current', '')
    },
    openImageOn: event => {
      const url = event.target.getAttribute('src')
      window.open(url, '_blank').focus()
    },
  }
  matching.forEach(entry => {
    if (entry.name === 'any') return
    starterPack.entryName = entry.name || null
    entry.action(starterPack)
  })
  // 'any' should be called last
  matching.forEach(entry => {
    if (entry.name === 'any') {
      starterPack.entryName = 'any'
      entry.action(starterPack)
    }
  })

  // Initialize matomo
  ;(0,_matomoInit__WEBPACK_IMPORTED_MODULE_0__["default"])()
}

const mainCaller = event => {
  main(event, CONFIG)
}
window.addEventListener('DOMContentLoaded', mainCaller) // DOM loaded
window.addEventListener('load', mainCaller) // DOM + static loaded
window.addEventListener('beforeunload', mainCaller) // unloaded (pressing back, visiting link ...)

})();

// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
/*!*********************************!*\
  !*** ./content/scss/style.scss ***!
  \*********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "css/style.min.css");
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,